docker pattern
30 Jun 2016
Tags: golang,docker,docker-compose,coreos,aws,ecs,ecr

jun asano
http://ntk1000.github.io/zlog
@ntk1000

* agenda
- current status
- local dev
- aws stg/prod
- todo

* current status
- using docker from local dev to stg/prod env
- docker-compose on local dev
- aws ecs/ecr on stg/prod env
- 全てがコンテナになる

* components
- nginx
- nodejs app for frontend
- golang app for backend api
- mackerel-agent (with entrykit)
- aws-auth-proxy

* components local only
- redis -> Elasticache
- mysql -> RDS
- elastic search -> Elasticsearch
- dynamodb local -> Dynamodb
- datastore系はdbaasに任せる
- dockerで頑張らない

* local dev
.image ./img/x.png 600 _

* local dev host
- docker toolbox aka boot2docker
- docker for macは試してない 開発落ち着いたら切り替えたい

* docker os
- alpine linux
- イメージサイズ小さいことが重要
- docker公式もalpine採用イメージ増えた

* local dev docker orchestration
- docker-compose
- docker link

* nodejs
- docker build遅い問題
- npm install済のイメージとapp add及び起動のみのイメージに分けた方がよさそう

* golang
- go buildしたバイナリをaddして起動するだけ
- go build遅い問題はある

* middleware
- confで設定する系(fluentd,nginxなど) 公式イメージにconf addしたものでイメージ化
- confで設定且つ中身を動的に変えたい系(mackerel-agent,nginxなど) entrykitをaddしてentrykit経由でいじる

* environment variables
- 12 factor appの教え
- 環境で変動するもの、ソース管理させないものは環境変数に封じ込める
- キー情報などはconfluence管理

* microservice
- apiたくさんある それぞれvm立てるのは現実的でない
- 自分が開発する部分以外のapiはdocker-composeで立てておいて連携確認
- datastore(mysql, elastic search, dynamodb)もコンテナ化し、開発者間で同じデータを見る

* docker-compose
- 良い
- コンテナ間依存関係の可視化、どこを環境変数で管理すべきか、yamlで把握しやすい
- 一部dockerコマンドのラッパーになっており、操作が楽(dockerコマンドオプション多すぎて覚えられない😭)

* aws stg/prod
.image ./img/x.png 600 _

* aws ecr
- private docker repository
- full managed
- 12時間で認証切れるのでdocker pull/pushする際は再認証するようにしている
- tokyo region対応はよ

* multi hosting
- stg/prodでは役割毎にネットワーク構成変えてセキュリティ高めたい
- frontend, backend api, datastoreの3構成
- docker linkでは解決できない、いわゆるservice discoveryが必要

* service discovery
- いくつか試した
- ambassador
- etcd, skydns, registrator
- kubernetes
- 構成の煩雑さやパフォーマンス、awsの対応状況などを理由に採用断念
- weaveは試してない
- kubernetesの今後に期待

* aws ecs
- コンテナ構成をtask definition、どのクラスタでtaskを動かすかをserviceという概念で定義
- task definitionは大凡docker-composeで定義していた内容をjsonに直したもの ecrとは別にtask単位でrevision管理される
- serviceはクラスタ(ec2 autoscale)とelb、動かすコンテナ数を定義
- service discoveryで問題だった、どのアドレス+portでどのコンテナが動いているか、がelbに抽象化されるので管理が楽
- 仮にコンテナが落ちたとしても希望するコンテナ数に達するまで自動的に起動してくれる

* blue green deployment
- 一番嬉しい機能
- service updateした時にelbから接続先コンテナの切替をよしなにやってくれる
- taskがrevision管理されてるので問題があった場合の切り戻しもほぼ同じ手順でできる(前のrevision指定し、service update)
- taskが指すコンテナのバージョンも厳密に区別がつくよう、git commit hashをバージョンとしている

* todo
- docker security (https://docs.docker.com/engine/security/security/)
