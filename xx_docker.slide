docker pattern
30 Jun 2016
Tags: golang,docker,docker-compose,coreos,aws,ecs,ecr

jun asano
http://ntk1000.github.io/zlog
@ntk1000

* agenda
- components
- local dev
- aws stg/prod
- todo

* summary
- using docker from local dev to stg/prod
- docker-compose on local dev
- aws ecs/ecr on stg/prod
- 全部コンテナで管理

* components
- nginx
- nodejs app for frontend
- golang app for backend api
- mackerel-agent (with entrykit)
- aws-auth-proxy

* components local only
- 全部コンテナでと言ったけど...
- datastore系はdbaasに任せる
- redis -> Elasticache
- mysql -> RDS
- elastic search -> Elasticsearch
- dynamodb local -> Dynamodb
- dockerで頑張らない(運用辛そう)

* local dev
.image ./img/localdev.png 550 _

* local dev host
- docker toolbox aka boot2docker vm
- docker for macは試してない
- 開発落ち着いたら切り替えたい

* docker os
- alpine linux
- docker push/pull頻繁に行うのでイメージサイズ小さいことが重要
- docker公式もalpine採用イメージ増えた

* local dev docker orchestration
- docker-compose
- docker link

* docker-compose.yaml
	nginx:
	  build: ../toolbox/nginx
	  environment:
	    - TZ=JST-9
	  ports:
	    - "80:80"
	  links:
	    - ui
	
	ui:
	  build: ../ui
	  environment:
	    - NODE_PORT=3000
	    - NODE_WS_PORT=8080
	    - NODE_ENV=production
	  ports:
	    - "3000:3000"
	    - "443:8080"
	  links:
	    - redis_front
	
	redis_front:
	  image: redis:alpine
	  environment:
	    - TZ=JST-9


* nodejs
- docker build遅い問題
- npm install済のイメージとapp add及び起動のみのイメージに分けた方がよさそう

* golang
- go buildしたバイナリをaddして起動するだけ
- go build遅い問題はある(go buildよりgo installのが早いらしい？)

* middleware
- confで設定する系(fluentd,nginxなど)
- 公式イメージに自前のconfを追加したものでイメージ化
- confで設定且つ中身を動的に変えたい系(mackerel-agent,nginxなど)
- entrykitをaddしてentrykit経由でいじる(環境変数で変更できる)
.link https://github.com/progrium/entrykit entrykit

* environment variables
- 12 factor appの教え
- 環境で変動するもの、ソース管理させないものは環境変数に封じ込める
- キー情報などはconfluence管理
.link http://12factor.net/ja/ 12factorapp

* microservice
- apiたくさんある
- それぞれvm立てるのは現実的でない
- コンテナとの親和性は高い
- 自分が開発する部分以外のapiはdocker-composeで立てておけばわざわざモックを作らなくて良い
- 開発時はdatastore(mysql, elastic search, dynamodb)もコンテナ化し、開発者間で同じデータを見る

* docker-compose
- 総じて良い
- v2まだ試してない
- コンテナ間依存関係の可視化、どこを環境変数で管理すべきか、yamlなので把握しやすい
- 一部dockerコマンドのラッパーになっており、操作が楽
- (docker単体のコマンドはオプション多すぎて覚えられない😭)

* aws stg/prod
.image ./img/aws.png 550 _

* aws ecr
- private container registry
- full managed
- 12時間で認証切れるのでdocker pull/pushする際は再認証するようにしている
- tokyo region対応望まれる

* multi hosting
- stg/prodでは役割毎にネットワーク構成変えてセキュリティ高めたい
- frontend, backend api, datastoreの3構成が最低限必要
- host跨いだ場合、docker linkでは解決できない、いわゆるservice discoveryが必要

* service discovery
- いくつか試した
- ambassador
- etcd, skydns, registrator
- kubernetes
- 構成の煩雑さやパフォーマンス、awsの対応状況などを理由に採用断念😣
- weave, docker networkingは試してない
- kubernetesの今後に期待😇

* aws ecs
- コンテナ構成をtask definition、どのクラスタでtaskを動かすかをserviceという概念で定義
- task definitionは大凡docker-composeで定義していた内容をjsonに直したもの
- ecrとは別にtask単位でrevision管理される
- serviceはクラスタ(ec2 autoscale)とelb、動かすコンテナ数を定義
- service discoveryで問題だった、どこでコンテナが動いているか、がelbに限定されるので管理が楽
- (1elbでport毎の定義ができればもっと便利になる)
- コンテナが落ちても希望する稼働コンテナ数に達するまで自動的に起動してくれる

* blue green deployment
- 一番嬉しい機能☺️
- service updateした時にelbから接続先コンテナのバージョン切替をよしなにやってくれる
- taskがrevision管理されてるので問題があった場合の切り戻しもほぼ同じ手順でできる(前のrevision指定し、service update)
- taskが指すコンテナのバージョンも厳密に区別がつくよう、git commit hashをタグ付けするようにした

* step1
.image https://blog.codeship.com/wp-content/uploads/2015/09/Tasks-split-between-two-EC2-instances.jpg 550 _

* step2
.image https://blog.codeship.com/wp-content/uploads/2015/09/ECS-launches-a-new-task.jpg 550 _

* step3
.image https://blog.codeship.com/wp-content/uploads/2015/09/ECS-killing-tasks-and-launching-new-ones.jpg 550 _

* step4
.image https://blog.codeship.com/wp-content/uploads/2015/09/ECS-has-met-the-desired-tasks.jpg 550 _

* stg/prod host
- ecs(amazon linux軽量化してdockerとecs-agent載せたもの)と coreosを併用
- 本当はcoreosにまとめたいが、cloudwatchlogs動かなかったり不安定なのでまだ様子見

* todo
- docker securityを高める(https://docs.docker.com/engine/security/security/)

* まとめ
.image ./img/containeraddicted.png 550 _
