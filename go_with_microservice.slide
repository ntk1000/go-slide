go with microservice
container, gateway, batch
4 Oct 2016
Tags: golang,docker,immutable infrastructure, infrastructure as a code

jun asano
http://ntk1000.github.io/zlog
@ntk1000

* about me
- intelligence seeds company
- father of 2 boyz (5 and 1)

* about seeds company
- hito manager
- applicant tracking system
- b2c/b2b

* project
- monolithic rails app -> "microservice" architecture

* why "microservice"?
😭
- 少しの機能修正で全体をdeployし直さないといけない
- 特定顧客専用の機能が管理上全体に適用されている
- 密結合してしまったcode

* how to develop microservices
- 機能毎にserviceとして分割
- (顧客数 x 機能)数ぶんserviceを立ち上げる必要がある
- container化してresource節約🐳

* why golang?
.image ./img/go_langtree.png 350 _
- 1つのbinaryにまとめられるportablity
- Dockerfile上ではbuildしたbinaryをADDするだけ
- 起動早くimage size小さく、containerと相性良い実感💜

* pattern
- backends for frontends
.image ./img/bff.png 350 _

* pattern
- api gateway
.image ./img/apigateway.png 350 _

* framework
- echo https://github.com/labstack/echo

* why echo?
- 速さと軽さ
- go-kitなどmicroservice向けframeworkも検討したがしっくりこなかった

* architecture
.image ./img/aws.png 550 _

* 失敗
- 下位のAPIで更新がある度にgateway実装が必要
- gatewayがfat且つSPOFに

* summary
- 

* go batch with docker
- require
- architecture
- actual
- golang library
- golang source
- golang compile
- docker code
- summary

* require - go batch with docker
- accept multiple triggers
  e-mail
  scheduler
  manual
- in case of failure, re-run
- auto scale

* architecture - go batch with docker
- on AWS EC2
- in Docker Container by AWS ECS
- AWS SQS long polling

* actual - go batch with docker
- enable to create multiple batches
- Dockernize

* batch dir - go batch with docker
  etc
    ├ docker-compose.yml
    └ go-build-batch.sh
  batch
    ├ cmd
    │ ├ a
    │ │ ├ internal
    │ │ └ cmd.go
    │ └ b
    │   ├ internal
    │   └ cmd.go
    ├ deploy
    │   ├ a
    │   │ └ Dockerfile
    │   └ b
    │     └ Dockerfile
    ├ internal
    ├ root
    │   └ root.go
    └ main.go

* golang source(1) - go batch with docker
  batch
    ├ cmd
    │ └ a
    │   └ cmd.go
    ├ root
    │   └ root.go
    └ *main.go*

* golang source(1) - go batch with docker
- batch/main.go
.code source/main.go /^func main/,/^}/

* golang source(2) - go batch with docker
  batch
    ├ cmd
    │ └ a
    │   └ cmd.go
    ├ root
    │   └ *root.go*
    └ main.go

* golang source(2) - go batch with docker
- batch/root/root.go
.code source/root.go

* golang source(3) - go batch with docker
  batch
    ├ cmd
    │ └ a
    │   └ *cmd.go*
    ├ root
    │   └ root.go
    └ main.go

* golang source(3) - go batch with docker
- batch/cmd/a/cmd.go
.code source/cmd.go /^import/,/^}/

* golang compile - go batch with docker
  etc
    ├ docker-compose.yml
    └ *go-build-batch.sh*
  batch
    └ deploy
        ├ a
        │ └ Dockerfile
        └ b
          └ Dockerfile

* compile - go batch with docker
- etc/go-build-batch.sh
.code source/go-build-batch.sh
'batch/main.go' is compiled,  a binary file is copied to each folders under 'deploy'.

* docker code(1) - go batch with docker
  etc
    ├ docker-compose.yml
    └ go-build-batch.sh
  batch
    └ deploy
        ├ a
        │ ├ *Dockerfile*
        │ └ xxxmicro
        └ b
          ├ Dockerfile
          └ xxxmicro

* docker code(1) - go batch with docker
- batch/deply/a/Dockerfile
.code source/Dockerfile

* docker code(2) - go batch with docker
  etc
    ├ *docker-compose.yml*
    └ go-build-batch.sh
  batch
    └ deploy
        ├ a
        │ ├ Dockerfile
        │ └ xxxmicro
        └ b
          ├ Dockerfile
          └ xxxmicro

* docker code(2) - go batch with docker
- etc/docker-compose.yml
.code source/docker-compose.yml

* summary - go batch with docker
- only one 'func main'
- subcommand-based CLIs. such as 'spf13/cobra'
- infinite loop for a docker process and AWS SQS polling
