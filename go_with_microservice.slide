go with microservice
container, gateway, batch
4 Oct 2016
Tags: golang,docker,microservice

jun asano
http://ntk1000.github.io/zlog
@ntk1000

* about me

- intelligence seeds company
- 5歳と1歳のムスコがおり、日々育児に追われています

about seeds company

- product : hito-manager
- applicant tracking system
- b2c / b2b web service

* project

from 

    legacy monolithic rails app 

to 

    "microservice"s


* why "microservice"?

😭

- 密結合してしまったcode
- 一部の機能について全体が影響を受けてしまう
- 特定顧客専用の機能が管理上全体に適用されている
- 負荷の高い・低い機能が混在しており最適なscale up/downができない

😌

- serviceという単位で影響範囲を限定
- 機能の特性に応じた最適な技術の適用
- 特定顧客専用機能も付加serviceという形で切出し可能
- 機能別にscale up/downが可能

* how to develop microservices

- メニュー毎にserviceとして分割(ユーザー、スケジュール管理、等)
- (顧客 x メニュー)数ぶんserviceが立ち上げる構成を想定
- container🐳化してresource節約 -> docker

why golang?

- 1つのbinaryにまとめられるportablity
- Dockerfile上ではbuildしたbinaryをADDするだけ
- 起動も早く、image sizeも小さく、containerと親和性高い
- (個人的には) team開発のしやすさも(fmt etc.)

* Dockerfile

    FROM gliderlabs/alpine:3.3
    RUN apk update

    ADD . /app
    WORKDIR /app

    CMD ["/app/appName"]

- base imageとして軽量なalpineを採用
- ADDでtest/build後のbinaryをcontainerに渡すだけ
- CMDでbinaryを実行

* pattern

- メニュー(機能)は独立したserviceとしてRESTなWebAPIとして動作させる
- 一方で機能を使う側(主にWebUI)には各serviceの詳細は意識させたくない
- 各APIとclientの間にfacade的な役割を置きたい

* backends for frontends (or api gateway)

.image ./img/bff.png 400 _
via マイクロサービスアーキテクチャ p.85  oreilly

* framework

.link https://github.com/labstack/echo echo
.image https://echo.labstack.com/images/logo.png

why echo?

- 速さと軽さ
- go-kitなどmicroservice向けframeworkも検討したがしっくりこなかった

* api layer

- 1st layer -> frontend : ui / ui backend
- 2nd layer -> gateway : bff / api gateway
- 3rd layer -> backend : each service API

* architecture overview
.image ./img/aws.png 580 _

* architecture

- container orchestration: aws ecs
- container registry: aws ecr
- service discovery: aws ecs + elb/alb
- log aggregation/management: docker log + cloudwatch + elasticsearch
- container hostos: coreos

* gateway...

開発が進み、APIが増える毎にgatewayの自作が負担に...

- backendにおける各APIで更新がある度、gateway実装/deployが必要
- gatewayが除々にfat化
- ecs/elbで分散されるとはいえ、gatewayの存在がSPOFに

どうすれば？

- APIの追加・更新はpluggableに行えたほうがよさそう
- この部分はbuild前提なgoに向いてない？

* api gateway oss

下記のようなapi gateway toolの導入を検討中

.link https://getkong.org/ kong
.image https://camo.githubusercontent.com/97aabdfeec1d04a818e3393c3bade3f54704852f/687474703a2f2f692e696d6775722e636f6d2f346a795151415a2e706e67 130 _

.link https://tyk.io/ tyk
.image https://tyk.io/wp-content/uploads/2016/03/TYK_FullLogo_WhiteText-1.png 150 _

* summary

- goでmicroservice化を進めた
- 個々のAPI開発やcontainer化はやりやすかった
- 一方でapi gatewayの開発には向かないように感じた

